#!/usr/bin/env node

const path = require('path');
const fs = require('fs');
const { PloinkyCloudServer } = require('../cloud/core/server');

// Parse command line arguments
const args = process.argv.slice(2);
const options = {};

for (let i = 0; i < args.length; i++) {
    const arg = args[i];
    
    switch (arg) {
        case '--port':
        case '-p':
            options.port = parseInt(args[++i]);
            break;
        case '--dir':
        case '-d':
            options.workingDir = path.resolve(args[++i]);
            break;
        case '--help':
        case '-h':
            showHelp();
            process.exit(0);
        case '--version':
        case '-v':
            showVersion();
            process.exit(0);
        default:
            if (arg.startsWith('-')) {
                console.error(`Unknown option: ${arg}`);
                showHelp();
                process.exit(1);
            }
    }
}

// Set defaults
options.port = options.port || process.env.PLOINKY_PORT || 8000;
options.workingDir = options.workingDir || process.cwd();

// Auto-initialize if needed
initializeEnvironment(options.workingDir);

function initializeEnvironment(workingDir) {
    const configPath = path.join(workingDir, 'config.json');
    const ploinkyPath = path.join(workingDir, '.ploinky');
    
    // Check if already initialized (look for config.json or .ploinky folder)
    if (!fs.existsSync(configPath) && !fs.existsSync(ploinkyPath)) {
        console.log('[p-cloud] First run detected. Initializing environment...');
        
        // Create required directories
        const dirs = [
            '.ploinky',
            'agents',
            'agents/localhost', 
            'activeUsers',
            'metrics'
        ];
        
        for (const dir of dirs) {
            const fullPath = path.join(workingDir, dir);
            if (!fs.existsSync(fullPath)) {
                fs.mkdirSync(fullPath, { recursive: true });
                console.log(`[p-cloud] Created ${dir}/`);
            }
        }
        
        // Create default configuration
        const defaultConfig = {
            domains: [
                { name: 'localhost', enabled: true }
            ],
            repositories: [
                { 
                    name: 'PloinkyDemo',
                    url: 'https://github.com/PloinkyRepos/PloinkyDemo.git',
                    enabled: true
                }
            ],
            deployments: [],
            settings: {
                port: options.port || 8000,
                workersCount: 'auto',
                metricsRetention: 7,
                logLevel: 'info'
            }
        };
        
        fs.writeFileSync(configPath, JSON.stringify(defaultConfig, null, 2));
        console.log('[p-cloud] Created default configuration');
        
        // Create .admin file with default password
        const crypto = require('crypto');
        const salt = crypto.randomBytes(32).toString('hex');
        const hash = crypto.pbkdf2Sync('admin', salt, 100000, 64, 'sha512').toString('hex');
        
        const adminData = [{
            username: 'admin',
            passwordHash: hash,
            salt: salt,
            createdAt: new Date().toISOString(),
            mustChangePassword: true
        }];
        
        fs.writeFileSync(
            path.join(workingDir, '.admin'),
            JSON.stringify(adminData, null, 2)
        );
        console.log('[p-cloud] Created admin account (username: admin, password: admin)');
        console.log('[p-cloud] IMPORTANT: Change the default password after first login!');
        console.log('[p-cloud] Environment initialization complete.\n');
    }
}

// Show startup banner
console.log(`
╔═══════════════════════════════════════════╗
║         PLOINKY CLOUD SERVER              ║
║     Lightweight Container Orchestration   ║
╚═══════════════════════════════════════════╝
`);

console.log(`Configuration:`);
console.log(`  Port: ${options.port}`);
console.log(`  Working Directory: ${options.workingDir}`);
console.log(`  Process ID: ${process.pid}`);
console.log(`  Node Version: ${process.version}`);
console.log('');

// Create and start the server
const server = new PloinkyCloudServer(options);

// Handle shutdown signals
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);
process.on('SIGUSR2', gracefulShutdown); // For nodemon

async function gracefulShutdown(signal) {
    console.log(`\n[p-cloud] Received ${signal}, shutting down gracefully...`);
    
    try {
        await server.stop();
        console.log('[p-cloud] Server stopped successfully');
        process.exit(0);
    } catch (err) {
        console.error('[p-cloud] Error during shutdown:', err);
        process.exit(1);
    }
}

// Handle uncaught errors
process.on('uncaughtException', (err) => {
    console.error('[p-cloud] Uncaught Exception:', err);
    gracefulShutdown('UNCAUGHT_EXCEPTION');
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('[p-cloud] Unhandled Rejection at:', promise, 'reason:', reason);
});

// Start the server
server.start().catch((err) => {
    console.error('[p-cloud] Failed to start server:', err);
    process.exit(1);
});

// Helper functions
function showHelp() {
    console.log(`
Ploinky Cloud Server

Usage:
  p-cloud [options]

Options:
  --port, -p <port>     Port to listen on (default: 8000)
  --dir, -d <path>      Working directory (default: current directory)
  --help, -h            Show this help message
  --version, -v         Show version information

Environment Variables:
  PLOINKY_PORT          Default port if not specified

Examples:
  p-cloud                      Start server on default port 8000
  p-cloud --port 8080          Start server on port 8080
  p-cloud -d /var/ploinky      Use /var/ploinky as working directory

Management UI:
  Once started, access the management interface at:
  http://localhost:<port>/management

Documentation:
  https://github.com/PloinkyCloud/ploinky
    `);
}

function showVersion() {
    const packageJson = require('../package.json');
    console.log(`Ploinky Cloud v${packageJson.version}`);
}