<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
  <title>Dress Match</title>
  <meta name="theme-color" content="#83c5ff">
  <style>
    :root{
      --bg1:#b3e5ff;
      --bg2:#f5e4ff;
      --panel:#ffffffee;
      --ink:#0f172a;
      --soft:#e6eefb;
      --accent:#6ee7b7;
      --accent2:#60a5fa;
      --stroke:#d6def7;
      --shadow:0 10px 28px rgba(31,41,55,.18);
    }
    *{box-sizing:border-box;touch-action:manipulation}
    html,body{height:100%;margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,"Apple Color Emoji","Segoe UI Emoji",sans-serif;color:var(--ink);background:linear-gradient(160deg,var(--bg1),var(--bg2)) fixed}
    .wrap{min-height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;gap:14px;padding:14px}
    .title{font-weight:800;letter-spacing:.5px;color:#0b194f;text-shadow:0 2px 0 #ffffff80}
    .stage{
      width:min(440px,94vw);
      aspect-ratio:340/460;
      background:radial-gradient(120% 140% at 50% 10%, #fff 0%, var(--soft) 65%, #eaf2ff 100%);
      border:2px solid var(--stroke);
      border-radius:24px;
      position:relative;
      overflow:hidden;
      box-shadow:var(--shadow);
    }
    canvas{width:100%;height:100%;display:block}
    .fx{position:absolute;inset:0;pointer-events:none}
    .toolbar, .palette, .controls{display:flex;gap:10px;flex-wrap:wrap;justify-content:center}
    .toolbar{max-width:760px}
    .tool{
      background:#fff;border:2px solid var(--stroke);border-radius:16px;padding:8px 10px;min-width:66px;
      display:flex;flex-direction:column;align-items:center;justify-content:center;gap:4px;
      box-shadow:0 6px 14px rgba(0,0,0,.06);cursor:pointer;user-select:none;font-weight:700;color:#243b6b
    }
    .tool .ico{font-size:22px;line-height:1}
    .tool .lab{font-size:12px;opacity:.9}
    .tool:active{transform:scale(.98)}
    .tool.active{outline:3px solid var(--accent2);box-shadow:0 0 0 6px #60a5fa2b}
    .palette{max-width:760px}
    .swatch{
      width:44px;height:44px;border-radius:14px;border:3px solid #ffffffcc;box-shadow:0 5px 10px #0000001b;
      cursor:pointer;transition:transform .08s ease, box-shadow .2s ease
    }
    .swatch:active{transform:scale(.96)}
    .controls{align-items:center}
    .btn{
      border:0;border-radius:14px;padding:12px 16px;font-size:16px;font-weight:800;cursor:pointer;color:#073b2d;
      background:linear-gradient(180deg,#a7f3d0,#6ee7b7);box-shadow:0 8px 18px #064e3b24;display:inline-flex;align-items:center;gap:8px
    }
    .btn:active{transform:translateY(1px)}
    .btn.secondary{background:linear-gradient(180deg,#bfdbfe,#93c5fd);color:#0b2b66}
    .btn.ghost{background:#ffffff;color:#385389;border:2px solid var(--stroke)}
    .msg{
      min-width:220px;min-height:24px;text-align:center;font-weight:900;font-size:18px;color:#0b2b66;
      text-shadow:0 2px 12px #ffffff;letter-spacing:.3px
    }
    .hint{font-size:14px;color:#24466b99}
    /* Sparkles */
    .sparkle{
      position:absolute;font-size:20px;animation:pop 900ms ease-out forwards;filter:drop-shadow(0 2px 2px #0000001a)
    }
    @keyframes pop{
      0%{opacity:0;transform:translate(var(--x),var(--y)) scale(.4) rotate(0deg)}
      40%{opacity:1}
      100%{opacity:0;transform:translate(calc(var(--x) + var(--dx)),calc(var(--y) + var(--dy))) scale(1.2) rotate(18deg)}
    }
    /* Focus */
    button:focus-visible,.swatch:focus-visible{outline:3px solid #22d3ee;outline-offset:3px;border-radius:14px}
    /* Tiny floating bubbles behind */
    .bubbles{position:absolute;inset:0;pointer-events:none;opacity:.3}
    .b1,.b2,.b3{
      position:absolute;border-radius:50%;background:radial-gradient(circle at 30% 30%, #fff, #c8e3ff);
      animation:float 8s ease-in-out infinite
    }
    .b1{width:90px;height:90px;left:8%;top:70%;animation-delay:-2s}
    .b2{width:140px;height:140px;left:74%;top:10%;animation-delay:-4s}
    .b3{width:70px;height:70px;left:60%;top:72%;animation-delay:-1s}
    @keyframes float{
      0%,100%{transform:translateY(0)}
      50%{transform:translateY(-8px)}
    }
    @media (min-width:720px){
      .title{font-size:28px}
    }
  </style>
</head>
<body>
  <div class="wrap" role="application" aria-label="Dress Match game">
    <div class="title" aria-hidden="true">Dress Match</div>
    <div class="stage" id="stage" aria-label="Avatar">
      <canvas id="avatar" width="340" height="460"></canvas>
      <div class="bubbles"><div class="b1"></div><div class="b2"></div><div class="b3"></div></div>
      <div class="fx" id="fx" aria-hidden="true"></div>
    </div>

    <div class="hint">Tap a picture, then tap a color</div>

    <div class="toolbar" id="tools" role="toolbar" aria-label="Parts"></div>
    <div class="palette" id="palette" aria-label="Colors"></div>

    <div class="controls">
      <button class="btn" id="check" aria-label="Check match"><span>âœ¨</span><span>Check</span></button>
      <button class="btn secondary" id="random" aria-label="Random outfit"><span>ðŸŽ²</span><span>Random</span></button>
      <button class="btn ghost" id="reset" aria-label="Reset colors"><span>ðŸ§¼</span><span>Reset</span></button>
      <span class="msg" id="msg" aria-live="polite"></span>
    </div>
  </div>

  <script>
    (()=>{'use strict';

      // Speech (friendly for kids)
      function speak(text){
        try{
          if(!('speechSynthesis' in window)) return;
          speechSynthesis.cancel();
          const u = new SpeechSynthesisUtterance(String(text));
          u.lang = 'en-US';
          u.rate = .95;
          u.pitch = 1.1;
          speechSynthesis.speak(u);
        }catch(_){}
      }
      function vibrate(ms){ try{ if(navigator.vibrate) navigator.vibrate(ms); }catch(_){ } }

      // Colors and parts
      const COLORS=['#111827','#374151','#6b7280','#a78bfa','#ef4444','#f59e0b','#22c55e','#60a5fa','#ec4899','#fde047','#10b981','#93c5fd','#c084fc','#fb7185'];
      const PARTS=[
        {key:'HAIR',label:'Hair',icon:'ðŸ’‡'},
        {key:'TOP',label:'Top',icon:'ðŸ‘š'},
        {key:'BOTTOM',label:'Skirt',icon:'ðŸ‘—'},
        {key:'SHOES',label:'Shoes',icon:'ðŸ‘Ÿ'},
        {key:'BAG',label:'Bag',icon:'ðŸ‘œ'},
        {key:'NECKLACE',label:'Necklace',icon:'ðŸ“¿'}
      ];
      // Nice color pairs for top/bottom
      const NICE=[ ['#a78bfa','#60a5fa'], ['#ec4899','#fde047'], ['#22c55e','#93c5fd'], ['#ef4444','#f59e0b'] ];

      const tools = document.getElementById('tools');
      const pal = document.getElementById('palette');
      const msg = document.getElementById('msg');
      const fx = document.getElementById('fx');
      const stage = document.getElementById('stage');

      let active='TOP';
      const style={
        HAIR:'#111827',
        TOP:'#a78bfa',
        BOTTOM:'#6b7280',
        SHOES:'#111827',
        BAG:'#374151',
        NECKLACE:'#fde047'
      };

      // Canvas and drawing
      const BASE_W=340, BASE_H=460;
      const cv = document.getElementById('avatar');
      const ctx = cv.getContext('2d');

      let scaleX=1, scaleY=1; // css->base mapping
      let t0 = performance.now();
      let paths = {}; // Path2D per part (in base units)

      function resizeCanvas(){
        const rect = cv.getBoundingClientRect();
        const dpr = Math.min(window.devicePixelRatio||1, 2);
        cv.width = Math.round(rect.width * dpr);
        cv.height = Math.round(rect.height * dpr);
        ctx.setTransform(dpr,0,0,dpr,0,0);
        // compute css->base scaling for hit testing
        scaleX = BASE_W / rect.width;
        scaleY = BASE_H / rect.height;
        drawAvatar(performance.now());
      }

      const SELECT_ORDER=['NECKLACE','BAG','HAIR','TOP','BOTTOM','SHOES']; // front to back

      function buildPaths(){
        const P={};
        P.HAIR=new Path2D();
        P.HAIR.ellipse(170,130,62,72,0,0,Math.PI*2);

        P.TOP=new Path2D();
        P.TOP.moveTo(128,210); P.TOP.lineTo(212,210); P.TOP.lineTo(198,270); P.TOP.lineTo(142,270); P.TOP.closePath();

        P.BOTTOM=new Path2D();
        P.BOTTOM.moveTo(142,270); P.BOTTOM.lineTo(198,270); P.BOTTOM.lineTo(220,340); P.BOTTOM.lineTo(120,340); P.BOTTOM.closePath();

        P.SHOES=new Path2D();
        P.SHOES.rect(138,384,28,12); P.SHOES.rect(174,384,28,12);

        P.BAG=new Path2D();
        P.BAG.rect(214,240,26,22);
        P.BAG.moveTo(215,240);
        P.BAG.arc(227,240,12,Math.PI,0,false);

        P.NECKLACE=new Path2D();
        // Thicker necklace region for easier tap
        const neckOuter = new Path2D();
        neckOuter.arc(170,186,18,Math.PI,0,false);
        const neckInner = new Path2D();
        neckInner.arc(170,186,12,Math.PI,0,false);
        P.NECKLACE.addPath(neckOuter);
        P.NECKLACE.addPath(neckInner);

        return P;
      }
      paths = buildPaths();

      function drawAvatar(now){
        ctx.clearRect(0,0,cv.width,cv.height);

        const t = (now - t0);
        const bob = Math.sin(t/900)*1.5;

        ctx.save();
        const sx = cv.width / (window.devicePixelRatio||1) / BASE_W;
        const sy = cv.height / (window.devicePixelRatio||1) / BASE_H;
        ctx.scale(sx,sy);
        ctx.translate(0,bob);

        // hair
        ctx.fillStyle=style.HAIR;
        ctx.fill(paths.HAIR);

        // head + neck
        ctx.fillStyle='#f6d7b0';
        ctx.beginPath();
        ctx.arc(170,140,30,0,Math.PI*2);
        ctx.fill();
        ctx.fillRect(162,170,16,16);

        // necklace
        ctx.strokeStyle=style.NECKLACE;
        ctx.lineWidth=4;
        ctx.beginPath();
        ctx.arc(170,186,16,Math.PI,0);
        ctx.stroke();

        // torso (top)
        ctx.fillStyle=style.TOP;
        ctx.fill(paths.TOP);

        // bottom (skirt)
        ctx.fillStyle=style.BOTTOM;
        ctx.fill(paths.BOTTOM);

        // legs
        ctx.fillStyle='#f6d7b0';
        ctx.fillRect(146,340,18,44);
        ctx.fillRect(176,340,18,44);

        // shoes
        ctx.fillStyle=style.SHOES;
        ctx.fill(paths.SHOES);

        // bag
        ctx.fillStyle=style.BAG;
        ctx.fillRect(214,240,26,22);
        ctx.strokeStyle=style.BAG; ctx.lineWidth=3;
        ctx.beginPath(); ctx.arc(227,240,12,Math.PI,0); ctx.stroke();

        // active glow
        if(paths[active]){
          ctx.save();
          ctx.shadowColor='rgba(96,165,250,.9)';
          ctx.shadowBlur=16;
          ctx.lineWidth=6;
          ctx.strokeStyle='#60a5fa';
          ctx.stroke(paths[active]);
          ctx.restore();
        }

        ctx.restore();
      }

      // Tools
      function renderTools(){
        tools.innerHTML='';
        PARTS.forEach(p=>{
          const b=document.createElement('button');
          b.className='tool'+(p.key===active?' active':'');
          b.setAttribute('role','button');
          b.setAttribute('aria-label',p.label);
          b.innerHTML=`<div class="ico">${p.icon}</div><div class="lab">${p.label}</div>`;
          b.addEventListener('pointerdown',()=>{
            active=p.key;
            renderTools();
            drawAvatar(performance.now());
            speak(p.label);
            vibrate(8);
          },{passive:true});
          tools.appendChild(b);
        });
      }

      // Palette
      function renderPalette(){
        pal.innerHTML='';
        COLORS.forEach(c=>{
          const d=document.createElement('button');
          d.className='swatch';
          d.style.background=c;
          d.setAttribute('aria-label',`Color ${c}`);
          d.addEventListener('pointerdown',()=>{
            style[active]=c;
            drawAvatar(performance.now());
            popSparklesRandom();
            vibrate(8);
          },{passive:true});
          pal.appendChild(d);
        });
      }

      // Hit testing on canvas (tap a part to select)
      cv.addEventListener('pointerdown', (e)=>{
        const rect = cv.getBoundingClientRect();
        const xCss = e.clientX - rect.left;
        const yCss = e.clientY - rect.top;
        const xBase = xCss * scaleX;
        const yBase = yCss * scaleY;

        for(const key of SELECT_ORDER){
          const p = paths[key];
          if(p && ctx.isPointInPath(p, xBase, yBase)){
            active = key;
            renderTools();
            drawAvatar(performance.now());
            const label = PARTS.find(pp=>pp.key===key)?.label || key;
            speak(label);
            vibrate(10);
            return;
          }
        }
      }, {passive:true});

      // Utils
      function closeHex(a,b){
        const A=[parseInt(a.substr(1,2),16),parseInt(a.substr(3,2),16),parseInt(a.substr(5,2),16)];
        const B=[parseInt(b.substr(1,2),16),parseInt(b.substr(3,2),16),parseInt(b.substr(5,2),16)];
        return Math.abs(A[0]-B[0])+Math.abs(A[1]-B[1])+Math.abs(A[2]-B[2])<60;
      }

      function checkMatch(){
        const t=style.TOP, b=style.BOTTOM;
        let ok=false;
        for(const pair of NICE){
          if((closeHex(t,pair[0])&&closeHex(b,pair[1])) || (closeHex(t,pair[1])&&closeHex(b,pair[0]))){
            ok=true; break;
          }
        }
        if(ok){
          msg.textContent='Yay! Lovely match! âœ¨';
          speak('Yay! Lovely match!');
          burstSparkles();
          vibrate([20,30,20]);
        }else{
          msg.textContent='Try another combo ðŸ˜Š';
          speak('Try another combo');
          vibrate(15);
        }
      }

      function randomOutfit(){
        const pick=()=>COLORS[Math.floor(Math.random()*COLORS.length)];
        style.TOP=pick();
        style.BOTTOM=pick();
        style.HAIR=pick();
        style.SHOES=pick();
        style.BAG=pick();
        style.NECKLACE=pick();
        drawAvatar(performance.now());
        popSparklesRandom();
      }

      function resetOutfit(){
        style.HAIR='#111827';
        style.TOP='#a78bfa';
        style.BOTTOM='#6b7280';
        style.SHOES='#111827';
        style.BAG='#374151';
        style.NECKLACE='#fde047';
        msg.textContent='';
        drawAvatar(performance.now());
      }

      // Sparkles
      const EMOJI = ['âœ¨','ðŸŒŸ','ðŸ’–','ðŸ’«','ðŸŒˆ'];
      function sparkle(x,y,dx,dy){
        const s=document.createElement('span');
        s.className='sparkle';
        s.textContent=EMOJI[(Math.random()*EMOJI.length)|0];
        s.style.setProperty('--x', x+'px');
        s.style.setProperty('--y', y+'px');
        s.style.setProperty('--dx', dx+'px');
        s.style.setProperty('--dy', dy+'px');
        fx.appendChild(s);
        setTimeout(()=>s.remove(),900);
      }
      function burstSparkles(){
        const rect = stage.getBoundingClientRect();
        for(let i=0;i<18;i++){
          const x = rect.width*0.5 + (Math.random()*120-60);
          const y = rect.height*0.45 + (Math.random()*60-30);
          const dx = (Math.random()*140-70);
          const dy = (Math.random()*-120-30);
          sparkle(x,y,dx,dy);
        }
      }
      function popSparklesRandom(){
        const rect = stage.getBoundingClientRect();
        const x = Math.random()*rect.width*0.8 + rect.width*0.1;
        const y = Math.random()*rect.height*0.6 + rect.height*0.1;
        for(let i=0;i<5;i++){
          sparkle(x + Math.random()*20-10, y + Math.random()*20-10, Math.random()*40-20, Math.random()*-30-10);
        }
      }

      // Controls
      document.getElementById('check').addEventListener('click', checkMatch);
      document.getElementById('random').addEventListener('click', randomOutfit);
      document.getElementById('reset').addEventListener('click', resetOutfit);

      // Animation loop (gentle bob)
      let animId=null;
      function loop(now){
        drawAvatar(now);
        animId = requestAnimationFrame(loop);
      }

      // Init
      renderTools();
      renderPalette();
      resizeCanvas();
      // Watch size
      new ResizeObserver(resizeCanvas).observe(stage);
      // Start anim
      animId = requestAnimationFrame(loop);

      // Cleanup on page hide
      document.addEventListener('visibilitychange',()=>{
        if(document.hidden){ if(animId) cancelAnimationFrame(animId); }
        else { t0=performance.now(); animId=requestAnimationFrame(loop); }
      });
    })();
  </script>
</body>
</html>