<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover, user-scalable=no" />
  <title>Snake Game</title>
  <style>
    :root { --bg:#0b0f17; --fg:#e5e7eb; --accent:#60a5fa; --btn:#1f2937; --btn-active:#374151; --danger:#ef4444; --snake:#10b981; --apple:#ef4444; --restart:#1e40af; }
    * { box-sizing:border-box; -webkit-tap-highlight-color: transparent; }
    html, body { height:100%; margin:0; background:var(--bg); color:var(--fg); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, sans-serif; }
    .wrap { min-height:100%; display:flex; align-items:center; justify-content:center; padding:16px; }
    .panel { width:100%; max-width:560px; text-align:center; padding:16px; border-radius:16px; }
    .score { font-size:24px; font-weight:700; margin-bottom:12px; color:var(--accent); }
    canvas { display:block; margin:0 auto; border:2px solid #1f2937; border-radius:10px; background:#0b1220; touch-action:none; }
    .controls { margin-top:16px; display:grid; grid-template-columns: repeat(3, min(26vw, 92px)); gap:12px; justify-content:center; }
    .controls button { padding:16px; background:var(--btn); color:#fff; border:none; border-radius:12px; font-size:22px; font-weight:800; cursor:pointer; line-height:1; }
    .controls button:active { background:var(--btn-active); }
    .controls button:focus-visible { outline:3px solid var(--accent); outline-offset:2px; }
    .controls .empty { visibility:hidden; }
    .game-over { font-size:20px; color:var(--danger); margin-top:16px; font-weight:700; }
    .restart-btn { margin-top:12px; padding:12px 20px; background:var(--restart); color:#fff; border:none; border-radius:10px; font-weight:800; cursor:pointer; }
    .restart-btn:focus-visible { outline:3px solid #93c5fd; outline-offset:2px; }
    @media (min-width:768px) {
      .controls { grid-template-columns: repeat(3, 90px); }
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="panel">
      <div class="score">Score: <span id="score">0</span></div>
      <canvas id="game" width="400" height="400" aria-label="Snake game board"></canvas>
      <div class="controls" aria-label="On-screen controls">
        <div class="empty"></div>
        <button id="up" aria-label="Move up">↑</button>
        <div class="empty"></div>
        <button id="left" aria-label="Move left">←</button>
        <button id="down" aria-label="Move down">↓</button>
        <button id="right" aria-label="Move right">→</button>
      </div>
      <div id="gameOver" class="game-over" style="display:none">
        Game Over!
        <br>
        <button class="restart-btn" onclick="restartGame()" aria-label="Restart">Restart</button>
      </div>
    </div>
  </div>
  <script>
    // Snake Game - mobile-first with touch and swipe controls
    const canvas = document.getElementById('game');
    const ctx = canvas.getContext('2d');
    const scoreEl = document.getElementById('score');
    const gameOverEl = document.getElementById('gameOver');

    const grid = 16; // cell size in px (keep integer for crisp rendering)
    let cellCount = canvas.width / grid; // dynamic based on canvas size
    let count = 0; // throttle counter for game speed
    let speedSteps = 6; // lower is faster

    const snake = {
      x: 160,
      y: 160,
      dx: grid,
      dy: 0,
      cells: [],
      maxCells: 4
    };

    const apple = { x: 320, y: 320 };

    let score = 0;
    let gameRunning = false;

    function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min)) + min; // min inclusive, max exclusive
    }

    function placeApple() {
      let valid = false;
      while (!valid) {
        apple.x = getRandomInt(0, cellCount) * grid;
        apple.y = getRandomInt(0, cellCount) * grid;
        valid = !snake.cells.some(c => c.x === apple.x && c.y === apple.y) && !(snake.x === apple.x && snake.y === apple.y);
      }
    }

    function drawApple() {
      ctx.fillStyle = '#ef4444';
      ctx.fillRect(apple.x, apple.y, grid - 2, grid - 2);
    }

    function drawSnake() {
      ctx.fillStyle = '#10b981';
      snake.cells.forEach(cell => {
        ctx.fillRect(cell.x, cell.y, grid - 2, grid - 2);
      });
    }

    function updateSnake() {
      // Move snake head
      snake.x += snake.dx;
      snake.y += snake.dy;

      // Wrap around edges
      if (snake.x < 0) snake.x = canvas.width - grid;
      else if (snake.x >= canvas.width) snake.x = 0;

      if (snake.y < 0) snake.y = canvas.height - grid;
      else if (snake.y >= canvas.height) snake.y = 0;

      // Insert new head position
      snake.cells.unshift({ x: snake.x, y: snake.y });

      // Trim tail
      if (snake.cells.length > snake.maxCells) {
        snake.cells.pop();
      }
    }

    function checkCollisions() {
      // Eat apple
      if (snake.x === apple.x && snake.y === apple.y) {
        snake.maxCells++;
        score += 10;
        scoreEl.textContent = score;
        placeApple();
      }

      // Self-collision
      for (let i = 1; i < snake.cells.length; i++) {
        if (snake.x === snake.cells[i].x && snake.y === snake.cells[i].y) {
          gameOver();
          break;
        }
      }
    }

    function gameLoop() {
      if (!gameRunning) return;

      if (++count < speedSteps) {
        requestAnimationFrame(gameLoop);
        return;
      }
      count = 0;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      updateSnake();
      drawApple();
      drawSnake();
      checkCollisions();

      requestAnimationFrame(gameLoop);
    }

    function gameOver() {
      gameRunning = false;
      gameOverEl.style.display = 'block';
    }

    function restartGame() {
      // Reset snake
      snake.x = Math.min(160, canvas.width - grid);
      snake.y = Math.min(160, canvas.height - grid);
      snake.dx = grid;
      snake.dy = 0;
      snake.cells = [];
      snake.maxCells = 4;

      // Score and UI
      score = 0;
      scoreEl.textContent = score;
      gameOverEl.style.display = 'none';

      // Place apple
      placeApple();

      // Reset speed counter and start loop
      count = 0;
      gameRunning = true;
      requestAnimationFrame(gameLoop);
    }

    // Direction control helpers
    function goLeft() {
      if (!gameRunning) return;
      if (snake.dx === 0) { snake.dx = -grid; snake.dy = 0; }
    }
    function goRight() {
      if (!gameRunning) return;
      if (snake.dx === 0) { snake.dx = grid; snake.dy = 0; }
    }
    function goUp() {
      if (!gameRunning) return;
      if (snake.dy === 0) { snake.dy = -grid; snake.dx = 0; }
    }
    function goDown() {
      if (!gameRunning) return;
      if (snake.dy === 0) { snake.dy = grid; snake.dx = 0; }
    }

    // Keyboard controls
    document.addEventListener('keydown', (e) => {
      if (!gameRunning) return;
      if (e.key === 'ArrowLeft') { e.preventDefault(); goLeft(); }
      else if (e.key === 'ArrowUp') { e.preventDefault(); goUp(); }
      else if (e.key === 'ArrowRight') { e.preventDefault(); goRight(); }
      else if (e.key === 'ArrowDown') { e.preventDefault(); goDown(); }
    }, { passive: false });

    // On-screen buttons (pointer-first, with click fallback)
    function bindButton(id, handler) {
      const el = document.getElementById(id);
      if (!el) return;
      el.addEventListener('pointerdown', (e) => { e.preventDefault(); handler(); }, { passive: false });
      el.addEventListener('click', (e) => { e.preventDefault(); handler(); });
    }
    bindButton('up', goUp);
    bindButton('down', goDown);
    bindButton('left', goLeft);
    bindButton('right', goRight);

    // Swipe controls on the canvas
    let touchStartX = 0, touchStartY = 0, touchActive = false;
    canvas.addEventListener('touchstart', (e) => {
      if (!gameRunning) return;
      const t = e.changedTouches[0];
      touchStartX = t.clientX;
      touchStartY = t.clientY;
      touchActive = true;
    }, { passive: true });

    // Prevent scroll when swiping on canvas
    canvas.addEventListener('touchmove', (e) => {
      if (touchActive) e.preventDefault();
    }, { passive: false });

    canvas.addEventListener('touchend', (e) => {
      if (!touchActive || !gameRunning) return;
      const t = e.changedTouches[0];
      const dx = t.clientX - touchStartX;
      const dy = t.clientY - touchStartY;
      const absX = Math.abs(dx);
      const absY = Math.abs(dy);
      const threshold = 24; // minimal swipe distance
      if (absX < threshold && absY < threshold) { touchActive = false; return; }

      if (absX > absY) {
        if (dx > 0) goRight(); else goLeft();
      } else {
        if (dy > 0) goDown(); else goUp();
      }
      touchActive = false;
    }, { passive: true });

    // Responsive canvas sizing
    function sizeCanvas() {
      const padding = 24; // approximate panel padding/margins
      const controlsSpace = 220; // space for score + controls + margins
      const maxSize = 560;
      const widthAvail = Math.max(160, Math.floor(window.innerWidth - padding * 2));
      const heightAvail = Math.max(160, Math.floor(window.innerHeight - controlsSpace));
      let size = Math.min(maxSize, widthAvail, heightAvail);

      // ensure size is a multiple of grid and at least 160
      size = Math.max(160, Math.floor(size / grid) * grid);

      // Apply to canvas attributes for crisp rendering
      if (canvas.width !== size || canvas.height !== size) {
        canvas.width = size;
        canvas.height = size;
        cellCount = canvas.width / grid;
      }
    }

    function init() {
      sizeCanvas();
      placeApple();
      gameRunning = true;
      requestAnimationFrame(gameLoop);
    }

    // Resize handling: adapt canvas and restart to keep gameplay stable
    let resizeTimer = null;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimer);
      resizeTimer = setTimeout(() => {
        const prevW = canvas.width;
        sizeCanvas();
        if (canvas.width !== prevW) {
          // Restart ensures snake fits the new grid and avoids odd collisions after resize
          restartGame();
        }
      }, 120);
    });

    // Start the game
    init();
  </script>
</body>
</html>