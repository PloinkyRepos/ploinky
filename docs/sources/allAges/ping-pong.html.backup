```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Ping Pong</title>
    <style>
        body {
            background-color: #000;
            color: #fff;
            font-family: 'Courier New', Courier, monospace;
            text-align: center;
            margin: 0;
            overflow: hidden;
            height: 100vh;
        }
        canvas {
            background-color: #000;
            border: 2px solid #fff;
            display: block;
            margin: 0 auto;
            width: 100%;
            height: calc(100vh - 50px);
            box-sizing: border-box;
        }
        h1 {
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <h1>Ping Pong</h1>
    <canvas id="gameCanvas"></canvas>
    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight - 50;
        }

        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();

        let ballX = canvas.width / 2;
        let ballY = canvas.height / 2;
        let ballSpeedX = 10;
        let ballSpeedY = 4;

        let player1Y = canvas.height / 2 - 50;
        let player2Y = canvas.height / 2 - 50;
        let paddleHeight = 100;
        let paddleWidth = 10;

        let player1Score = 0;
        let player2Score = 0;
        const winningScore = 5;
        let showingWinScreen = false;

        function handleStartGame() {
            if (showingWinScreen) {
                player1Score = 0;
                player2Score = 0;
                showingWinScreen = false;
            }
        }

        function handleTouchMove(evt) {
            const touch = evt.touches[0];
            const mousePos = calculateMousePos({ clientX: touch.clientX, clientY: touch.clientY });
            player1Y = mousePos.y - (paddleHeight / 2);
            evt.preventDefault();
        }

        window.onload = function() {
            canvas.addEventListener('mousedown', handleStartGame);
            canvas.addEventListener('touchstart', handleStartGame);
            canvas.addEventListener('mousemove', function(evt) {
                let mousePos = calculateMousePos(evt);
                player1Y = mousePos.y - (paddleHeight / 2);
            });
            canvas.addEventListener('touchmove', handleTouchMove);

            const framesPerSecond = 30;
            setInterval(function() {
                moveEverything();
                drawEverything();
            }, 1000 / framesPerSecond);
        }

        function ballReset() {
            if (player1Score >= winningScore || player2Score >= winningScore) {
                showingWinScreen = true;
            }
            ballSpeedX = -ballSpeedX;
            ballX = canvas.width / 2;
            ballY = canvas.height / 2;
        }

        function computerMovement() {
            let player2YCenter = player2Y + (paddleHeight / 2);
            if (player2YCenter < ballY - 35) {
                player2Y += 6;
            } else if (player2YCenter > ballY + 35) {
                player2Y -= 6;
            }
        }

        function moveEverything() {
            if (showingWinScreen) return;

            computerMovement();

            ballX += ballSpeedX;
            ballY += ballSpeedY;

            if (ballX < 0) {
                if (ballY > player1Y && ballY < player1Y + paddleHeight) {
                    ballSpeedX = -ballSpeedX;
                    let deltaY = ballY - (player1Y + paddleHeight / 2);
                    ballSpeedY = deltaY * 0.35;
                } else {
                    player2Score++;
                    ballReset();
                }
            }
            if (ballX > canvas.width) {
                if (ballY > player2Y && ballY < player2Y + paddleHeight) {
                    ballSpeedX = -ballSpeedX;
                    let deltaY = ballY - (player2Y + paddleHeight / 2);
                    ballSpeedY = deltaY * 0.35;
                } else {
                    player1Score++;
                    ballReset();
                }
            }
            if (ballY < 0 || ballY > canvas.height) {
                ballSpeedY = -ballSpeedY;
            }
        }

        function drawNet() {
            for (let i = 0; i < canvas.height; i += 40) {
                colorRect(canvas.width / 2 - 1, i, 2, 20, 'white');
            }
        }

        function drawEverything() {
            colorRect(0, 0, canvas.width, canvas.height, 'black');

            if (showingWinScreen) {
                ctx.fillStyle = 'white';
                ctx.textAlign = 'center';
                ctx.font = "30px sans-serif";
                ctx.fillText(player1Score >= winningScore ? "Left Player Won!" : "Right Player Won!", canvas.width / 2, 200);
                ctx.fillText("Tap to continue", canvas.width / 2, 500);
                return;
            }

            drawNet();
            colorRect(0, player1Y, paddleWidth, paddleHeight, 'white');
            colorRect(canvas.width - paddleWidth, player2Y, paddleWidth, paddleHeight, 'white');
            colorCircle(ballX, ballY, 10, 'white');

            ctx.textAlign = 'left';
            ctx.font = "20px sans-serif";
            ctx.fillText(player1Score, 100, 100);
            ctx.fillText(player2Score, canvas.width - 100, 100);
        }

        function colorCircle(centerX, centerY, radius, drawColor) {
            ctx.fillStyle = drawColor;
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2, true);
            ctx.fill();
        }

        function colorRect(leftX, topY, width, height, drawColor) {
            ctx.fillStyle = drawColor;
            ctx.fillRect(leftX, topY, width, height);
        }

        function calculateMousePos(evt) {
            const rect = canvas.getBoundingClientRect();
            const root = document.documentElement;
            const mouseX = evt.clientX - rect.left - root.scrollLeft;
            const mouseY = evt.clientY - rect.top - root.scrollTop;
            return {
                x: mouseX,
                y: mouseY
            };
        }
    </script>
</body>
</html>
```