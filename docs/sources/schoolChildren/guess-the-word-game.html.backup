<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
  <title>Guess the Word - Kids Edition</title>
  <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600;700&family=Nunito:wght@600;800&display=swap" rel="stylesheet" />
  <style>
    :root{
      --bg1:#ff9a9e;
      --bg2:#fad0c4;
      --bg3:#fbc2eb;
      --bg4:#a18cd1;
      --card:#ffffffee;
      --primary:#ff6f61;
      --secondary:#4dd0e1;
      --accent:#ffd166;
      --success:#34c759;
      --danger:#ff3b30;
      --text:#263238;
      --muted:#90a4ae;
      --tile:#ffffff;
      --tile-border:#e6ecf1;
      --btn:#ffffff;
      --shadow:0 10px 25px rgba(0,0,0,.10);
      --radius:22px;
      --touch:64px;
    }

    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0;
      font-family:"Baloo 2", system-ui, -apple-system, Segoe UI, Nunito, Roboto, Arial, sans-serif;
      color:var(--text);
      background: linear-gradient(120deg,var(--bg1),var(--bg2),var(--bg3),var(--bg4));
      background-size: 300% 300%;
      animation: bgMove 20s ease infinite;
      display:flex;
      align-items:center;
      justify-content:center;
      -webkit-tap-highlight-color: transparent;
    }

    @keyframes bgMove{
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
    }

    .app{
      width:min(980px, 96vw);
      margin:auto;
      padding:clamp(14px, 2.6vw, 28px);
    }

    .card{
      background:var(--card);
      border-radius: clamp(18px, 3vw, 28px);
      box-shadow: var(--shadow);
      backdrop-filter: blur(6px);
      padding:clamp(16px, 4vw, 34px);
      position:relative;
      overflow:hidden;
    }

    .confetti-layer{
      position:absolute; inset:0; pointer-events:none; overflow:visible;
    }

    header{
      text-align:center;
      margin-bottom:clamp(14px, 2.8vw, 24px);
    }
    h1{
      margin:0;
      font-size:clamp(28px, 6.5vw, 52px);
      line-height:1.05;
      letter-spacing:1px;
      background:linear-gradient(90deg, #ff6f61, #ff9f1c, #4dd0e1, #7b61ff);
      -webkit-background-clip:text;
      background-clip:text;
      color:transparent;
      text-shadow: 0 2px 0 #ffffffaa;
      display:flex;
      align-items:center;
      justify-content:center;
      gap:.4em;
    }
    h1 .emoji{filter: drop-shadow(0 3px 0 rgba(255,255,255,.6))}
    .subtitle{
      font-family:"Nunito", sans-serif;
      margin:10px auto 0;
      font-weight:800;
      font-size:clamp(16px, 3.7vw, 22px);
      color:#2b2b2b;
    }

    .hud{
      display:grid;
      grid-template-columns: 1fr auto 1fr;
      align-items:center;
      gap:12px;
      margin:clamp(10px, 2.4vw, 18px) 0;
    }
    .message{
      grid-column: 1 / -1;
      text-align:center;
      background:linear-gradient(90deg, #fff8e1, #fffbea);
      border:2px dashed #ffe082;
      color:#6d4c41;
      border-radius: 18px;
      padding:10px 14px;
      font-size:clamp(16px, 3.6vw, 20px);
      font-weight:800;
      letter-spacing:.3px;
    }
    .score, .lives{
      display:flex;
      align-items:center;
      gap:8px;
      font-weight:800;
      font-size:clamp(16px, 3.6vw, 20px);
    }
    .badge{
      padding:6px 12px;
      background:#ffffff;
      border-radius:999px;
      box-shadow: var(--shadow);
      display:flex; align-items:center; gap:8px;
    }
    .lives .heart{
      width:clamp(22px, 5.6vw, 32px);
      height:clamp(22px, 5.6vw, 32px);
      display:inline-grid; place-items:center;
      border-radius:50%;
      background: radial-gradient(circle at 30% 30%, #ff8a80, #ff3b30);
      color:white;
      box-shadow: 0 4px 10px rgba(255,59,48,.3);
      transform-origin:center;
      animation: heartbeat 1.2s ease-in-out infinite;
    }
    .lives .heart.lost{
      filter: grayscale(1) brightness(.9);
      background: #e0e0e0;
      color:#b0bec5;
      animation:none;
      transform: scale(.9);
      opacity:.75;
    }
    @keyframes heartbeat{
      0%, 28%, 100% {transform: scale(1)}
      14% {transform: scale(1.15)}
    }

    .word-area{
      text-align:center;
      margin:clamp(10px, 3vw, 24px) 0;
    }
    #word-display{
      display:flex;
      justify-content:center;
      flex-wrap:wrap;
      gap: clamp(6px, 2vw, 12px);
      padding: 8px 0;
      min-height: clamp(72px, 16vw, 110px);
    }
    .tile{
      min-width:clamp(40px, 9vw, 70px);
      height:clamp(52px, 12vw, 84px);
      border-radius: 16px;
      background: linear-gradient(180deg, #ffffff, #f6f9fc);
      border:2px solid var(--tile-border);
      box-shadow: 0 8px 0 #e6edf5;
      display:grid; place-items:center;
      font-size:clamp(22px, 6.5vw, 44px);
      font-weight:800;
      color:#1f2937;
      position:relative;
      letter-spacing:1px;
    }
    .tile.unknown::after{
      content:"_";
      color:#90a4ae;
      position:absolute;
      bottom:10px;
      left:0; right:0;
      font-size:clamp(18px, 4.8vw, 28px);
    }
    .tile.revealed{
      animation: popIn .45s cubic-bezier(.17,.67,.32,1.35);
    }
    @keyframes popIn{
      0%{transform: translateY(14px) scale(.7) rotate(-3deg); opacity:.2}
      60%{transform: translateY(-6px) scale(1.1)}
      100%{transform: translateY(0) scale(1); opacity:1}
    }

    .keyboard{
      margin-top:clamp(8px, 2.6vw, 14px);
      display:grid;
      grid-template-columns: repeat(7, 1fr);
      gap:clamp(6px, 2vw, 14px);
    }
    .key{
      height:var(--touch);
      min-width:var(--touch);
      border:none;
      border-radius: 16px;
      font-size: clamp(18px, 4.6vw, 26px);
      font-weight:800;
      color:#263238;
      background:linear-gradient(180deg, #ffffff, #f1f5f9);
      box-shadow: 0 8px 0 #dce5ee, 0 0 0 4px #ffffff inset;
      cursor:pointer;
      transition: transform .05s ease, filter .2s ease, background .2s ease;
      touch-action: manipulation;
    }
    .key:active{ transform: translateY(2px) }
    .key.correct{
      background:linear-gradient(180deg, #b2ffb2, #8aff8a);
      box-shadow: 0 8px 0 #7bd77b, 0 0 0 4px #ffffff inset;
      color:#0b5f0b;
      animation: correctPulse .4s ease;
    }
    @keyframes correctPulse{
      0%{transform: scale(1)}
      50%{transform: scale(1.12)}
      100%{transform: scale(1)}
    }
    .key.wrong{
      background:linear-gradient(180deg, #ffd5d5, #ffb3b3);
      box-shadow: 0 8px 0 #f39797, 0 0 0 4px #ffffff inset;
      color:#7a0e0e;
      animation: shake .25s ease both;
    }
    .key:disabled{
      opacity:.65; cursor:not-allowed; filter: saturate(.6);
    }
    @keyframes shake{
      0%{transform: translateX(0)}
      25%{transform: translateX(-5px)}
      50%{transform: translateX(5px)}
      75%{transform: translateX(-3px)}
      100%{transform: translateX(0)}
    }

    .controls{
      margin-top:clamp(12px, 3.2vw, 18px);
      display:flex;
      justify-content:center;
      gap:12px;
      flex-wrap:wrap;
    }
    .btn{
      min-height:var(--touch);
      padding:0 18px;
      border:none;
      border-radius: 18px;
      font-size: clamp(18px, 4.6vw, 24px);
      font-weight:900;
      display:inline-flex;
      align-items:center;
      gap:10px;
      background: linear-gradient(180deg, #fff, #f3f7ff);
      color:#1f2937;
      box-shadow: 0 10px 0 #d9e6fb;
      cursor:pointer;
      touch-action: manipulation;
    }
    .btn:active{ transform: translateY(2px) }
    .btn.primary{
      background: linear-gradient(180deg, #ffcf6f, #ffb22d);
      box-shadow: 0 10px 0 #d5921f;
      color:#5b3a00;
    }
    .btn.secondary{
      background: linear-gradient(180deg, #a5f3fc, #38bdf8);
      box-shadow: 0 10px 0 #0ea5e9;
      color:#053a4a;
    }

    .sr-only{
      position:absolute!important;
      height:1px;width:1px;
      overflow:hidden; clip:rect(1px,1px,1px,1px);
      white-space:nowrap; border:0; padding:0; margin:-1px;
    }

    .result-modal{
      position: fixed;
      inset:0;
      display:grid;
      place-items:center;
      background:rgba(0,0,0,.25);
      opacity:0; visibility:hidden;
      transition: .25s ease;
      z-index:30;
      padding: 18px;
    }
    .result-modal.show{
      opacity:1; visibility:visible;
    }
    .result-card{
      width:min(680px, 96vw);
      background:linear-gradient(180deg, #ffffff, #f6fbff);
      border-radius: 22px;
      box-shadow: var(--shadow);
      padding: 22px;
      text-align:center;
      position:relative;
      overflow:hidden;
    }
    .result-card h2{
      margin:10px 0 8px;
      font-size: clamp(26px, 7vw, 40px);
    }
    .result-word{
      font-size: clamp(22px, 6vw, 32px);
      font-weight:900;
      color:#374151;
      margin-bottom: 12px;
    }
    .result-emoji{
      font-size: clamp(36px, 12vw, 64px);
    }

    .float-bubble{
      position:absolute;
      width:80px;height:80px;border-radius:50%;
      background: radial-gradient(circle at 30% 30%, #ffffffaa, #ffffff00);
      border:2px solid #ffffff55;
      animation: float 12s ease-in-out infinite;
      pointer-events:none;
      z-index:0;
    }
    .float-bubble.b1{ top:-20px; left: -10px; animation-duration: 16s }
    .float-bubble.b2{ bottom:-30px; right: -10px; animation-duration: 20s }
    .float-bubble.b3{ top: 40%; right:-20px; animation-duration: 14s }
    @keyframes float{
      0%,100% { transform: translateY(0) translateX(0) }
      50% { transform: translateY(-16px) translateX(8px) }
    }

    @media (min-width: 760px){
      .keyboard{ grid-template-columns: repeat(9, 1fr) }
      .badge{ padding:8px 14px }
    }
  </style>
</head>
<body>
  <div class="app">
    <div class="card" role="application" aria-label="Guess the word game">
      <div class="confetti-layer" id="confetti"></div>

      <span class="float-bubble b1"></span>
      <span class="float-bubble b2"></span>
      <span class="float-bubble b3"></span>

      <header>
        <h1><span class="emoji" aria-hidden="true">🎈</span> Guess the Word <span class="emoji" aria-hidden="true">🔤</span></h1>
        <div class="subtitle">Tap the letters to find the hidden word! 🌟</div>
      </header>

      <div class="hud">
        <div class="score badge" id="streakBadge" aria-live="polite" title="Winning streak">
          <span aria-hidden="true">⭐</span>
          <span>Streak: <strong id="streak">0</strong></span>
        </div>

        <div class="message" id="message" role="status" aria-live="polite">Good luck, word wizard! 🧙‍♂️✨</div>

        <div class="lives badge" id="lives" aria-label="Lives">
          <!-- hearts rendered here -->
        </div>
      </div>

      <div class="word-area" aria-label="Word">
        <div id="word-display" aria-live="polite"></div>
      </div>

      <div class="keyboard" id="keyboard" role="group" aria-label="Letters keyboard">
        <!-- keys rendered here -->
      </div>

      <div class="controls">
        <button class="btn secondary" id="newWordBtn" aria-label="New word">
          <span aria-hidden="true">🔄</span> New Word
        </button>
        <button class="btn primary" id="replayBtn" aria-label="Play again">
          <span aria-hidden="true">▶️</span> Play Again
        </button>
      </div>

      <input class="sr-only" id="hidden-input" autocomplete="off" autocapitalize="none" spellcheck="false" />

    </div>
  </div>

  <div class="result-modal" id="resultModal" aria-hidden="true" aria-label="Result">
    <div class="result-card" role="dialog" aria-modal="true">
      <div class="result-emoji" id="resultEmoji">🎉</div>
      <h2 id="resultTitle">You Win!</h2>
      <div class="result-word">The word was: <strong id="resultWord">apple</strong></div>
      <div class="controls" style="justify-content:center;">
        <button class="btn primary" id="playNextBtn"><span aria-hidden="true">👉</span> Next Word</button>
        <button class="btn secondary" id="closeModalBtn"><span aria-hidden="true">❌</span> Close</button>
      </div>
    </div>
  </div>

  <script>
    // Game Data
    const words = [
      'apple','banana','orange','grape','strawberry','melon','peach','lemon','mango','pear','cherry','kiwi',
      'cookie','panda','tiger','zebra','rabbit','happy','sunny','smile','rainbow','balloon','puzzle','rocket'
    ];

    // State
    let currentWord = '';
    let guessed = new Set();
    let wrongGuesses = 0;
    let maxGuesses = 6;
    let streak = 0;
    let lastGuessLetter = '';

    // Elements
    const wordDisplay = document.getElementById('word-display');
    const keyboard = document.getElementById('keyboard');
    const messageEl = document.getElementById('message');
    const livesEl = document.getElementById('lives');
    const newWordBtn = document.getElementById('newWordBtn');
    const replayBtn = document.getElementById('replayBtn');
    const hiddenInput = document.getElementById('hidden-input');

    const resultModal = document.getElementById('resultModal');
    const resultEmoji = document.getElementById('resultEmoji');
    const resultTitle = document.getElementById('resultTitle');
    const resultWord = document.getElementById('resultWord');
    const playNextBtn = document.getElementById('playNextBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');

    const confettiLayer = document.getElementById('confetti');
    const streakEl = document.getElementById('streak');

    // Helpers
    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('');

    function sampleWord(){
      return words[Math.floor(Math.random() * words.length)];
    }

    function resetState(){
      currentWord = sampleWord();
      guessed = new Set();
      wrongGuesses = 0;
      maxGuesses = 6;
      lastGuessLetter = '';
      updateUI(true);
      focusHiddenInput();
    }

    function updateUI(isNew=false){
      renderLives();
      renderWord(isNew);
      renderKeyboard(isNew);
      setMessage(isNew ? 'New word! Ready... set... guess! 🚀' : messageEl.textContent);
    }

    function renderLives(){
      livesEl.innerHTML = '';
      const livesFrag = document.createDocumentFragment();
      for(let i=0;i<maxGuesses;i++){
        const heart = document.createElement('span');
        heart.className = 'heart' + (i < maxGuesses - wrongGuesses ? '' : ' lost');
        heart.role = 'img';
        heart.ariaLabel = i < maxGuesses - wrongGuesses ? 'life' : 'lost life';
        heart.textContent = i < maxGuesses - wrongGuesses ? '❤️' : '🩶';
        livesFrag.appendChild(heart);
      }
      livesEl.appendChild(livesFrag);
    }

    function renderWord(isNew){
      wordDisplay.innerHTML = '';
      const chars = currentWord.split('');
      // Create tiles
      const frag = document.createDocumentFragment();
      chars.forEach((ch) => {
        const tile = document.createElement('div');
        tile.className = 'tile';
        const revealed = guessed.has(ch);
        tile.textContent = revealed ? ch.toUpperCase() : '';
        if(revealed){
          if(ch === lastGuessLetter && !isNew){
            tile.classList.add('revealed');
          }
        } else {
          tile.classList.add('unknown');
        }
        frag.appendChild(tile);
      });
      wordDisplay.appendChild(frag);
    }

    function renderKeyboard(isNew){
      if(isNew || !keyboard.children.length){
        keyboard.innerHTML = '';
        const frag = document.createDocumentFragment();
        alphabet.forEach(letter=>{
          const btn = document.createElement('button');
          btn.className = 'key';
          btn.type = 'button';
          btn.textContent = letter.toUpperCase();
          btn.setAttribute('data-letter', letter);
          btn.setAttribute('aria-label', `Letter ${letter}`);
          btn.style.userSelect = 'none';
          frag.appendChild(btn);
        });
        keyboard.appendChild(frag);
      }
      // Update state styles
      [...keyboard.children].forEach(btn=>{
        const l = btn.getAttribute('data-letter');
        btn.disabled = guessed.has(l) || isGameOver();
        btn.classList.remove('correct','wrong');
      });
    }

    function setMessage(text){
      if(!text) return;
      messageEl.textContent = text;
    }

    function isGameOver(){
      return wrongGuesses >= maxGuesses || currentWord.split('').every(ch => guessed.has(ch));
    }

    function guessLetter(letter){
      if(!letter || isGameOver()) return;
      letter = letter.toLowerCase();
      if(!/^[a-z]$/.test(letter)) return;
      if(guessed.has(letter)) return;

      guessed.add(letter);
      lastGuessLetter = letter;

      const keyBtn = keyboard.querySelector(`[data-letter="${letter}"]`);
      const isCorrect = currentWord.includes(letter);

      if(isCorrect){
        keyBtn && keyBtn.classList.add('correct');
        setMessage(randomGoodJob());
        burstEmojis('✨🌟🎈', 12, wordDisplay);
      }else{
        wrongGuesses++;
        keyBtn && keyBtn.classList.add('wrong');
        setMessage(randomTryAgain());
        shake(keyboard);
      }

      renderLives();
      renderWord();
      disableUsedKey(letter);

      checkGameStatus();
    }

    function disableUsedKey(letter){
      const btn = keyboard.querySelector(`[data-letter="${letter}"]`);
      if(btn) btn.disabled = true;
    }

    function checkGameStatus(){
      const won = currentWord.split('').every(ch => guessed.has(ch));
      const lost = wrongGuesses >= maxGuesses;

      if(won){
        streak++;
        streakEl.textContent = String(streak);
        showResult(true);
        makeConfetti(80);
      } else if(lost){
        streak = 0;
        streakEl.textContent = '0';
        showResult(false);
      }
    }

    function showResult(won){
      resultEmoji.textContent = won ? '🎉' : '🧩';
      resultTitle.textContent = won ? 'You did it! 🎉' : 'Good try! 💪';
      resultWord.textContent = currentWord.toUpperCase();
      resultModal.classList.add('show');
      resultModal.setAttribute('aria-hidden','false');
      // Disable keys
      [...keyboard.children].forEach(btn=> btn.disabled = true);
    }

    function closeResult(){
      resultModal.classList.remove('show');
      resultModal.setAttribute('aria-hidden','true');
    }

    function makeConfetti(count=60){
      const colors = ['#ff6f61','#ffb703','#4dd0e1','#90be6d','#f72585','#3a86ff','#ffd166'];
      const frag = document.createDocumentFragment();
      for(let i=0;i<count;i++){
        const conf = document.createElement('span');
        conf.style.position='absolute';
        conf.style.top='-10px';
        conf.style.left = Math.random()*100 + '%';
        conf.style.width = conf.style.height = (6 + Math.random()*8) + 'px';
        conf.style.background = colors[Math.floor(Math.random()*colors.length)];
        conf.style.transform = `rotate(${Math.random()*360}deg)`;
        conf.style.borderRadius = Math.random()>.6 ? '50%' : '4px';
        conf.style.opacity = '0.95';
        conf.style.willChange = 'transform, top, opacity';
        confettiLayer.appendChild(conf);

        const fall = confettiFall(conf, 1200 + Math.random()*900);
        frag.appendChild(conf);
        fall.then(()=> conf.remove());
      }
    }

    function confettiFall(el, duration){
      return new Promise(res=>{
        const start = performance.now();
        const startX = el.offsetLeft;
        const wobble = 40 + Math.random()*60;
        const rotStart = Math.random()*360;

        function frame(now){
          const t = Math.min(1, (now - start)/duration);
          const ease = t<.5 ? 2*t*t : -1+(4-2*t)*t; // easeInOutQuad
          el.style.top = (ease*100) + '%';
          el.style.transform = `translateX(${Math.sin(t*Math.PI*2)*wobble}px) rotate(${rotStart + t*720}deg)`;
          el.style.opacity = String(1 - t*.8);
          if(t<1) requestAnimationFrame(frame);
          else res();
        }
        requestAnimationFrame(frame);
      });
    }

    function burstEmojis(chars, count, anchorEl){
      const arr = [...chars];
      const rect = anchorEl.getBoundingClientRect();
      const baseX = rect.left + rect.width/2;
      const baseY = rect.top + rect.height/2 + window.scrollY;
      for(let i=0;i<count;i++){
        const span = document.createElement('span');
        span.textContent = arr[i % arr.length];
        span.style.position='fixed';
        span.style.left = baseX + 'px';
        span.style.top = baseY + 'px';
        span.style.zIndex = 25;
        span.style.fontSize = (16 + Math.random()*18) + 'px';
        span.style.pointerEvents='none';
        document.body.appendChild(span);

        const ang = Math.random()*Math.PI*2;
        const dist = 40 + Math.random()*80;
        const dx = Math.cos(ang)*dist;
        const dy = Math.sin(ang)*dist - 20;
        const dur = 500 + Math.random()*500;

        const start = performance.now();
        function anim(now){
          const t = Math.min(1, (now - start)/dur);
          const ease = 1 - Math.pow(1-t, 2);
          span.style.transform = `translate(${dx*ease}px, ${dy*ease}px) scale(${1.2 - .6*ease})`;
          span.style.opacity = String(1 - ease);
          if(t<1) requestAnimationFrame(anim);
          else span.remove();
        }
        requestAnimationFrame(anim);
      }
    }

    function shake(el){
      el.style.animation = 'shake .25s ease';
      el.addEventListener('animationend', ()=> el.style.animation = '', {once:true});
    }

    function randomGoodJob(){
      const msgs = [
        'Yay! You found a letter! ✅',
        'Awesome! Keep going! 🌟',
        'Great guess! 🎯',
        'Woohoo! Nice one! 🥳',
        'Brilliant! 💡'
      ];
      return msgs[Math.floor(Math.random()*msgs.length)];
    }

    function randomTryAgain(){
      const msgs = [
        'Oops! Try another letter! ❌',
        'Not this time. You got it! 💪',
        'Keep trying! You can do it! 🚀',
        'Close! Pick a new one! 🔍',
        'Don’t give up! 🌈'
      ];
      return msgs[Math.floor(Math.random()*msgs.length)];
    }

    // Events
    keyboard.addEventListener('click', (e)=>{
      const btn = e.target.closest('.key');
      if(!btn) return;
      guessLetter(btn.getAttribute('data-letter'));
    });

    newWordBtn.addEventListener('click', ()=>{
      streak = 0; streakEl.textContent = '0';
      closeResult();
      resetState();
      setMessage('Fresh start! New word loaded 🔄');
    });

    replayBtn.addEventListener('click', ()=>{
      closeResult();
      resetState();
      setMessage('Let’s play again! ▶️');
    });

    playNextBtn.addEventListener('click', ()=>{
      closeResult();
      resetState();
      setMessage('Next word coming up! 🎁');
    });

    closeModalBtn.addEventListener('click', ()=>{
      closeResult();
    });

    // Keyboard support
    document.addEventListener('keydown', (e)=>{
      if(resultModal.classList.contains('show')){
        if(e.key === 'Enter'){
          playNextBtn.click();
        }
        return;
      }
      const key = e.key.toLowerCase();
      if(/^[a-z]$/.test(key)){
        guessLetter(key);
      }else if(e.key === 'Enter'){
        // Focus cycle: no op, just for friendliness
        focusHiddenInput();
      }
    });

    // Keep input focus for mobile keyboards if needed
    function focusHiddenInput(){
      // only focus on larger screens to avoid mobile keyboard covering UI unnecessarily
      if(window.innerWidth > 820){
        hiddenInput.focus({preventScroll:true});
      }
    }

    // Initialize
    resetState();
  </script>
</body>
</html>