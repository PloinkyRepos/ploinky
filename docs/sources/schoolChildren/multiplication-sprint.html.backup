<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no, viewport-fit=cover" />
  <title>Multiply Magic</title>
  <link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg1:#ff9a9e;
      --bg2:#fad0c4;
      --bg3:#fbc2eb;
      --bg4:#a6c1ee;
      --card:#ffffffee;
      --text:#10233a;
      --muted:#4b5563;
      --correct:#22c55e;
      --wrong:#ef4444;
      --accent:#7c3aed;
      --shadow:0 14px 40px rgba(0,0,0,.18);
      --radius:24px;
      --btnH:86px;
    }
    *{box-sizing:border-box}
    html,body{height:100%;margin:0}
    body{
      font-family:"Baloo 2", system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji", "Segoe UI Symbol";
      color:var(--text);
      -webkit-font-smoothing:antialiased;
      -moz-osx-font-smoothing:grayscale;
      background:linear-gradient(120deg,var(--bg1),var(--bg2),var(--bg3),var(--bg4));
      background-size:400% 400%;
      animation:bgSlide 18s ease infinite;
      overflow-x:hidden;
      touch-action:manipulation;
      -webkit-tap-highlight-color:transparent;
    }
    @keyframes bgSlide{
      0%{background-position:0% 50%}
      50%{background-position:100% 50%}
      100%{background-position:0% 50%}
    }
    .wrap{
      min-height:100%;
      display:flex;
      flex-direction:column;
      gap:14px;
      padding:calc(16px + env(safe-area-inset-top)) 16px calc(20px + env(safe-area-inset-bottom));
      align-items:center;
      justify-content:center;
    }

    .titleRow{
      display:flex;align-items:center;justify-content:space-between;
      width:min(720px,96vw);
      padding:4px 2px;
      gap:10px;
    }
    .title{
      display:flex;align-items:center;gap:10px;
      font-weight:800;
      font-size:clamp(24px, 5.2vw, 36px);
      letter-spacing:.5px;
      text-shadow:0 2px 0 rgba(255,255,255,.35);
      animation:floaty 3s ease-in-out infinite;
    }
    .title .logo{
      font-size:1.2em;
      filter:drop-shadow(0 6px 6px rgba(0,0,0,.15));
    }
    @keyframes floaty{
      0%,100%{transform:translateY(0)}
      50%{transform:translateY(-4px)}
    }

    .controls{
      display:flex;gap:8px;align-items:center;flex-shrink:0;
    }
    .iconBtn{
      border:none;border-radius:16px;
      height:52px;min-width:52px;padding:0 16px;
      font-size:24px;font-weight:800;
      background:rgba(255,255,255,.6);
      box-shadow:var(--shadow);
      color:var(--text);
      display:flex;align-items:center;justify-content:center;gap:8px;
      cursor:pointer;transition:transform .08s ease, background .2s ease;
      user-select:none;
    }
    .iconBtn:active{transform:scale(.96)}
    .iconBtn .label{font-size:16px}
    .muted{opacity:.8}

    .card{
      width:min(720px,96vw);
      background:radial-gradient(140% 120% at 0% 0%, #fff, #f8fbff 60%);
      border-radius:var(--radius);
      padding:18px 16px 20px;
      box-shadow:var(--shadow);
      border:2px solid rgba(255,255,255,.65);
      position:relative;
      overflow:hidden;
    }

    .stats{
      display:flex;justify-content:space-between;align-items:center;
      padding:2px 4px 8px;
      color:var(--muted);
      font-size:clamp(14px,3.2vw,18px);
      gap:10px;
    }
    .badge{
      background:linear-gradient(120deg,#fee2e2,#fef9c3);
      color:#7c2d12;
      border-radius:999px;
      padding:6px 12px;
      font-weight:700;
      display:inline-flex;align-items:center;gap:8px;
      box-shadow:0 8px 20px rgba(0,0,0,.08) inset;
    }

    .problem{
      display:flex;flex-direction:column;align-items:center;justify-content:center;
      gap:10px;margin:8px 0 14px;
    }
    .expr{
      font-size:clamp(40px, 10vw, 70px);
      font-weight:800;
      letter-spacing:1px;
      line-height:1.1;
      display:flex;align-items:center;gap:12px;flex-wrap:wrap;justify-content:center;
    }
    .expr .bubble{
      background:linear-gradient(120deg,#e0f2fe,#dbeafe);
      border:2px solid #bfdbfe;
      border-radius:18px;
      padding:3px 10px;
      font-size:clamp(18px,5vw,26px);
      color:#1d4ed8;
      font-weight:800;
    }

    .opts{
      display:grid;
      grid-template-columns:repeat(2, minmax(0, 1fr));
      gap:12px;
      width:100%;
      margin-top:10px;
    }
    .btn{
      position:relative;
      border:none;cursor:pointer;user-select:none;
      border-radius:22px;
      padding:12px 16px;
      min-height:var(--btnH);
      font-weight:900;
      font-size:clamp(28px, 8vw, 40px);
      color:#0b1220;
      background-size:160% 160%;
      background-position:50% 0%;
      transition:transform .08s ease, filter .2s ease, background-position .6s ease, box-shadow .2s ease;
      box-shadow:0 10px 24px rgba(0,0,0,.12);
      display:flex;align-items:center;justify-content:center;
      gap:10px;
      outline:none;
    }
    .btn:active{transform:scale(.98)}
    .btn .emoji{font-size:clamp(24px, 6vw, 30px); filter:drop-shadow(0 2px 0 rgba(255,255,255,.6))}
    .btn.choice-0{background-image:linear-gradient(135deg,#fef3c7,#fbcfe8)}
    .btn.choice-1{background-image:linear-gradient(135deg,#bbf7d0,#a7f3d0)}
    .btn.choice-2{background-image:linear-gradient(135deg,#bfdbfe,#c7d2fe)}
    .btn.choice-3{background-image:linear-gradient(135deg,#fde68a,#fca5a5)}
    .btn:hover{background-position:50% 100%}

    .btn.correct{
      background-image:linear-gradient(135deg,#34d399,#86efac);
      box-shadow:0 0 0 6px rgba(34,197,94,.25), 0 16px 28px rgba(16,185,129,.35);
      animation:pop .35s cubic-bezier(.17,.67,.3,1.42);
    }
    .btn.wrong{
      background-image:linear-gradient(135deg,#fecaca,#fca5a5);
      box-shadow:0 0 0 6px rgba(239,68,68,.25), 0 16px 28px rgba(239,68,68,.25);
      animation:shake .35s ease;
    }
    @keyframes pop{
      0%{transform:scale(1)}
      50%{transform:scale(1.06)}
      100%{transform:scale(1)}
    }
    @keyframes shake{
      0%,100%{transform:translateX(0)}
      20%{transform:translateX(-6px)}
      40%{transform:translateX(6px)}
      60%{transform:translateX(-4px)}
      80%{transform:translateX(4px)}
    }

    .feedback{
      min-height:28px;
      text-align:center;
      font-size:clamp(18px,4.8vw,22px);
      font-weight:800;
      color:#0b1220;
      display:flex;align-items:center;justify-content:center;gap:8px;
    }
    .feedback.ok{color:#16a34a}
    .feedback.no{color:#dc2626}
    .fadeIn{animation:fadeIn .35s ease}
    @keyframes fadeIn{
      from{opacity:0; transform:translateY(6px)}
      to{opacity:1; transform:none}
    }

    .overlay{
      position:fixed;inset:0;display:none;align-items:center;justify-content:center;
      background:rgba(0,0,0,.4);z-index:10;
      backdrop-filter:blur(2px);
    }
    .countWrap{
      background:linear-gradient(135deg,#eef2ff,#e0e7ff);
      color:#1f2937;
      border:3px solid #c7d2fe;
      border-radius:28px;
      width:min(420px,86vw);
      padding:22px 16px;
      text-align:center;
      box-shadow:0 24px 60px rgba(0,0,0,.28);
      display:flex;flex-direction:column;align-items:center;gap:8px;
      animation:pop .36s ease;
    }
    .countNum{
      font-size:clamp(60px, 18vw, 100px);
      font-weight:900;
      line-height:1;
      text-shadow:0 4px 0 rgba(255,255,255,.6);
      animation:countPulse .6s ease infinite;
    }
    .countEmoji{font-size:clamp(28px,10vw,40px)}
    @keyframes countPulse{
      0%,100%{transform:scale(1)}
      50%{transform:scale(1.08)}
    }

    /* Confetti */
    .confetti{
      position:absolute;inset:0;pointer-events:none;overflow:hidden;
    }
    .piece{
      position:absolute;width:10px;height:14px;border-radius:3px;
      opacity:.9;
      animation:fall 900ms ease-out forwards;
    }
    @keyframes fall{
      0%{transform:translateY(-20px) rotate(0deg)}
      100%{transform:translateY(120%) rotate(290deg)}
    }

    /* Accessibility helpers */
    .sr-only{
      position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;
      clip:rect(0,0,0,0);white-space:nowrap;border:0;
    }
  </style>
</head>
<body>
  <div class="wrap">
    <div class="titleRow">
      <div class="title"><span class="logo">üß†‚ú®</span> Multiply Magic</div>
      <div class="controls">
        <button id="soundBtn" class="iconBtn" aria-pressed="true" aria-label="Sound on">
          <span class="btnIcon" aria-hidden="true">üîä</span><span class="label">Sound</span>
        </button>
        <button id="skipBtn" class="iconBtn" aria-label="Skip">
          <span class="btnIcon" aria-hidden="true">‚è≠Ô∏è</span><span class="label">Skip</span>
        </button>
      </div>
    </div>

    <div class="card" role="region" aria-label="Math Game">
      <div class="stats">
        <div class="badge" id="streak"><span aria-hidden="true">üî•</span> Streak: <span id="streakNum">0</span></div>
        <div class="badge"><span aria-hidden="true">‚≠ê</span> Level: Easy</div>
      </div>

      <div class="problem">
        <div class="expr" id="expr" aria-live="polite">
          <span class="bubble" id="bubbleA">?</span>
          <span>√ó</span>
          <span class="bubble" id="bubbleB">?</span>
          <span>=</span>
          <span class="bubble">?</span>
        </div>
        <div class="feedback" id="feedback" aria-live="polite"></div>
      </div>

      <div class="opts" id="opts" role="group" aria-label="Choose the answer"></div>

      <div class="confetti" id="confetti"></div>
    </div>
  </div>

  <div class="overlay" id="overlay" aria-hidden="true">
    <div class="countWrap" role="dialog" aria-live="assertive" aria-label="Next question countdown">
      <div class="countEmoji" id="countEmoji">üéâ</div>
      <div class="countNum" id="countNum">3</div>
      <div class="countEmoji" id="countSub">Get ready!</div>
    </div>
  </div>

  <div class="sr-only" id="srStatus" aria-live="polite"></div>

  <script>
    // Utility: Random helpers
    const randInt=(min,max)=>Math.floor(Math.random()*(max-min+1))+min;
    const shuffle=arr=>arr.map(v=>[Math.random(),v]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]);

    // Elements
    const exprEl = document.getElementById('expr');
    const bubbleA = document.getElementById('bubbleA');
    const bubbleB = document.getElementById('bubbleB');
    const optsEl = document.getElementById('opts');
    const feedback = document.getElementById('feedback');
    const confettiEl = document.getElementById('confetti');
    const overlay = document.getElementById('overlay');
    const countNum = document.getElementById('countNum');
    const countEmoji = document.getElementById('countEmoji');
    const countSub = document.getElementById('countSub');
    const soundBtn = document.getElementById('soundBtn');
    const skipBtn = document.getElementById('skipBtn');
    const streakEl = document.getElementById('streakNum');
    const srStatus = document.getElementById('srStatus');

    // State
    let a=0, b=0, answer=0, locked=false, streak=0, soundOn=true;

    // Speech
    function speak(t){
      try{
        if(!soundOn || !('speechSynthesis' in window)) return;
        speechSynthesis.cancel();
        const u = new SpeechSynthesisUtterance(String(t));
        u.lang='en-US';
        u.rate=1.02;
        u.pitch=1.1;
        speechSynthesis.speak(u);
      }catch(_){}
    }

    // Haptics
    const vibrate = ms => { try{ if(navigator.vibrate) navigator.vibrate(ms); }catch(_){ } };

    // Build a new problem
    function newProblem(){
      locked = false;
      feedback.textContent = '';
      feedback.className = 'feedback';
      // pick numbers
      a = randInt(2,9);
      b = randInt(2,9);
      answer = a*b;

      bubbleA.textContent = a;
      bubbleB.textContent = b;

      srStatus.textContent = `What is ${a} times ${b}?`;
      speak(`${a} times ${b}. What is the answer?`);

      // options
      const options = new Set([answer]);
      while(options.size < 4){
        // generate nearby fun distractors
        let delta = randInt(-9, 9);
        if(delta === 0) delta = 1;
        const v = answer + delta;
        if(v>=0) options.add(v);
      }
      const opts = shuffle([...options]);

      // render
      optsEl.innerHTML = '';
      opts.forEach((val,idx)=>{
        const btn = document.createElement('button');
        btn.className = `btn choice-${idx%4}`;
        btn.setAttribute('type','button');
        btn.setAttribute('aria-label', String(val));
        btn.dataset.value = String(val);
        btn.innerHTML = `<span class="emoji" aria-hidden="true">${['üç≠','üéà','üß∏','üåü'][idx%4]}</span><span class="num">${val}</span>`;
        optsEl.appendChild(btn);
      });
    }

    // Confetti
    function burstConfetti(){
      confettiEl.innerHTML = '';
      const colors = ['#f87171','#fbbf24','#34d399','#60a5fa','#a78bfa','#f472b6'];
      const pieces = 26;
      const rect = confettiEl.getBoundingClientRect();
      for(let i=0;i<pieces;i++){
        const p = document.createElement('div');
        p.className='piece';
        p.style.left = Math.random()*100 + '%';
        p.style.top = '-10px';
        p.style.background = colors[i%colors.length];
        p.style.transform = `translateY(-20px) rotate(${Math.random()*180}deg)`;
        p.style.animationDuration = 700 + Math.random()*450 + 'ms';
        p.style.width = (8 + Math.random()*6) + 'px';
        p.style.height = (10 + Math.random()*10) + 'px';
        confettiEl.appendChild(p);
      }
      // cleanup
      setTimeout(()=>{ confettiEl.innerHTML=''; }, 1200);
    }

    // Visual countdown
    function countdownNext(cb){
      overlay.style.display='flex';
      overlay.setAttribute('aria-hidden','false');
      const faces = ['üéâ','üò∫','üåà','‚≠ê'];
      let k = 3;
      function tick(){
        if(k===0){
          countNum.textContent = 'Go!';
          countEmoji.textContent = 'üöÄ';
          countSub.textContent = 'You rock!';
          setTimeout(()=>{
            overlay.style.display='none';
            overlay.setAttribute('aria-hidden','true');
            cb();
          }, 450);
          return;
        }
        countNum.textContent = String(k);
        countEmoji.textContent = faces[randInt(0,faces.length-1)];
        countSub.textContent = 'Next question';
        k--;
        setTimeout(tick, 600);
      }
      tick();
    }

    // Handle choice
    function handlePick(value, btn){
      if(locked) return;
      const v = Number(value);
      if(v === answer){
        locked = true;
        streak++;
        streakEl.textContent = String(streak);
        btn.classList.add('correct');
        feedback.classList.add('ok','fadeIn');
        feedback.innerHTML = 'Yay! <span aria-hidden="true">‚úÖüéâ</span>';
        srStatus.textContent = 'Correct!';
        speak('Correct! Great job!');
        vibrate(30);
        burstConfetti();
        setTimeout(()=>countdownNext(newProblem), 580);
      }else{
        // wrong
        streak = 0;
        streakEl.textContent = '0';
        btn.classList.add('wrong');
        setTimeout(()=>btn.classList.remove('wrong'), 420);
        feedback.classList.add('no','fadeIn');
        feedback.textContent = 'Try again ‚ùå';
        srStatus.textContent = 'Wrong. Try again.';
        speak('Try again!');
        vibrate(120);
      }
    }

    // Event delegation for options
    optsEl.addEventListener('pointerup', (e)=>{
      const btn = e.target.closest('.btn');
      if(!btn) return;
      handlePick(btn.dataset.value, btn);
    });

    // Controls
    soundBtn.addEventListener('click', ()=>{
      soundOn = !soundOn;
      soundBtn.setAttribute('aria-pressed', String(soundOn));
      soundBtn.setAttribute('aria-label', soundOn ? 'Sound on' : 'Sound off');
      soundBtn.firstElementChild.textContent = soundOn ? 'üîä' : 'üîá';
      soundBtn.classList.toggle('muted', !soundOn);
      if(!soundOn && 'speechSynthesis' in window) try{ speechSynthesis.cancel(); }catch(_){}
    });
    skipBtn.addEventListener('click', ()=>{
      speak('Skipping.');
      feedback.textContent='';
      newProblem();
    });

    // Initialize
    newProblem();
  </script>
</body>
</html>